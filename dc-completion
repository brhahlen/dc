#!/usr/bin/env bash
# Copyright (C) 2022 - 2023 Ben HÃ¤hlen
# This is the completion file for `dc`
##############
# Version 3.0.1
##############
_dc_completions()
{
    local CUR PREV OPTS BASE
    COMPREPLY=()
    CUR="${COMP_WORDS[COMP_CWORD]}"
    PREV="${COMP_WORDS[COMP_CWORD-1]}"

    if [ "${COMP_WORDS[1]}" == "-v" ]; then
        cmd="${COMP_WORDS[2]}"
    else
        cmd="${COMP_WORDS[1]}"
    fi

    ## Variables
    export DC_CMD="docker compose"

    # Basic/main options that will be completed
    OPTS="install up down restart-stack-hard restart-stack-soft logs-stack start stop restart pull logs network list help update version prune"

    # Based on the arguments, we can run functions
    case "$cmd" in
        up|down|restart-stack-hard|restart-stack-soft|logs-stack)
            local STACKS=$(for STACK in $(find "${DC_DIR}" -name docker-compose.yml -printf '%h\n' | sort -u | rev | cut -d / -f 1 | rev); do echo "${STACK}" ; done )
            if [ ! "$cmd" == "logs-stack" ]; then
                STACKS="all ${STACKS}"
            fi
            COMPREPLY=( $(compgen -W "${STACKS}" -- "${CUR}") )
            return 0
            ;;
        start|stop|restart|pull|logs)
            # We might need to create the tmp-files, so reusing the command from dc, however, this is duplicating stuff, which is not nice, but for a MVP, it works
            for STACK in $(find "${DC_DIR}" -name docker-compose.yml -printf '%h\n' | sort -u);
            do
                ENV="${DC_DIR}/.env"
                DC_COMMAND="${DC_CMD} --env-file ${ENV}"
                TMP_DIR="/tmp/dc_stack_services"
                STACK_NAME=$(echo "${STACK}" | rev | cut -d / -f 1 | rev)
                if [ ! -d "${TMP_DIR}" ]; then
                    # echo "${TMP_DIR} not found. Creating..."
                    mkdir -p ${TMP_DIR}
                fi
                if [ -f ${TMP_DIR}/"${STACK_NAME}" ]; then
                    # echo "File exists, checking age"
                    if [ "$(find ${TMP_DIR}/"${STACK_NAME}" -mmin +30)" ]; then
                        # echo "File is too old, refreshing"
                        cd "${STACK}" || { echo "cd failed"; exit 1; }
                        ${DC_COMMAND} config --services > ${TMP_DIR}/"${STACK_NAME}"
                        cd - > /dev/null || { echo "cd failed"; exit 1; }
                    fi
                else
                    # echo "File does not exist, creating"
                    cd "${STACK}" || { echo "cd failed"; exit 1; }
                    ${DC_COMMAND} config --services > ${TMP_DIR}/"${STACK_NAME}"
                    cd - > /dev/null || { echo "cd failed"; exit 1; }
                fi
            done
            # On to the completion
            local SERVICES=$(while IFS= read -r SERVICE; do echo "${SERVICE}"; done < <(cat /tmp/dc_stack_services/*) )
            COMPREPLY=( $(compgen -W "${SERVICES}" -- "${CUR}") )
            return 0
            ;;
        install|network|list|help|version)
            return
            ;;
        prune)
            COMPREPLY=( $(compgen -W "basic system" -- "${CUR}") )
            return 0
            ;;
        *)
            ;;
    esac

   COMPREPLY=( $(compgen -W "${OPTS}" -- "${CUR}") )
   return 0
}

complete -F _dc_completions dc
