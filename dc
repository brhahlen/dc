#!/bin/bash
##################################
######### DESCRIPTION ############
# This script goes into ~/bin and is used to control my docker-compose (dc) stack
# There are a few assumptions:
# - Docker-compose files live in ~/gandalf_docker/<stack_name>/
# - Environment file is located in ~/gandalf_docker/.env
####################
# Goals:
# - You are able to run the script from anywhere
# - You are able to use tab-completion (provided by dc-completion)
####################
# Provides the following main functions:
# - up      - bring up all stacks, an individual stack or a container
# - down    - brings down all stacks or an individual stack
# - stop    - stops all stacks, an individual stack, or a container
# - restart - restart all stacks, a stack, or a container
# - network - create the macvlan network that is needed
####################
# Thoughts:
# Can probably put the services of stacks into a variable array, and then loop over that to find to which stack the contatiner belongs. However, the question is, are we going to do that periodically and put that in a global variable? Or is that something we need to do on-demand (which will cause some delays in running the script)?
# There's probably more interesting thoughts to take into account, but let's see how far we get with this.
# Also, some functions can probably be offloaded into dc-completion at some point?
##################################
###### VARIABLES
export DC_DIR="/home/download/gandalf_docker"
export ENV="${DC_DIR}/.env"
export DC_CMD=`which docker-compose`
export DC_COMMAND="${DC_CMD} --env-file ${ENV}"

# COLORS
export RED='\033[0;31m'
export NC='\033[0m' # No Color

###### FUNCTIONS
# USAGE
function show_usage (){
    printf "Usage: $0 [options [parameters]]\n"
    printf "\n"
    printf "Options:\n"
    printf " ${RED}up${NC}        Bring up a stack\n"
    printf " ${RED}down${NC}      Bring down a stack\n"
    printf " ${RED}start${NC}     Start one or more containers\n"
    printf " ${RED}stop${NC}      Stop one or more containers\n"
    printf " ${RED}restart${NC}   Restart one or more containers\n"
    printf " ${RED}network${NC}   Create the MacVLAN network\n"
    printf " ${RED}list${NC}      List stacks and services in the stack"
    printf " ${RED}help${NC}      Print help\n"

return 0
}

# UP
function up () {
    if [ -z "$1" ]; then
        echo "No argument provided, please use the name of a stack or all"
    elif [ "$1" == "all" ]; then
        echo "Bringing up all stacks"
        for stack in $(find ${DC_DIR} -name docker-compose.yml -printf '%h\n' | sort -u);
        do
            echo -e "\n$stack:"
            echo "cd $stack"
            echo "${DC_COMMAND} up -d"
            echo "cd -"
        done
    else
        for stack in $@;
        do
            STACK="${DC_DIR}/$stack"
            echo "Bringing up stack(s) $stack"
            echo "cd ${STACK}"
            echo "${DC_COMMAND} up -d"
            echo "cd -"
        done
    fi
    }

# DOWN
function down(){
    if [ -z "$1" ]; then
        echo "No argument provided, please use the name of a stack or all"
    elif [ "$1" == "all" ]; then
        echo "Bringing down all stacks"
        for stack in $(find ${DC_DIR} -name docker-compose.yml -printf '%h\n' | sort -ur);
        do
            echo -e "\n$stack:"
            echo "cd $stack"
            echo "${DC_COMMAND} down"
            echo "cd -"
        done
    else
        for stack in $@;
        do
            STACK="${DC_DIR}/$stack"
            echo "Bringing down stack(s) $stack"
            echo "cd ${STACK}"
            echo "${DC_COMMAND} down"
            echo "cd -"
        done
    fi
    }

# START
function start(){
    echo "Starting the following container(s):"
    echo "${DC_COMMAND} start "
    }

# STOP
# Stop also removes the image
function stop(){
    echo "Stopping the following container(s):"
    echo "${DC_COMMAND} stop "
    }

# RESTART
# Restart is basically a stop and start in sequence
function restart(){
    echo "restart"
    stop
    start
    }

# NETWORK
function network(){
    echo "network"
    }

# LIST
function list(){
    echo "Listing Stacks and Services"
    for stack in $(find ${DC_DIR} -name docker-compose.yml -printf '%h\n' | sort -u);
    do
        STACK_NAME=$(echo $stack | rev | cut -d / -f 1 | rev)
        echo "-----------------------------------"
        printf "Stack ${RED}${STACK_NAME}${NC} contains services:\n"
        cd $stack
        ${DC_COMMAND} ps --services
        cd - > /dev/null
    done
    }

###### CASES
case ${1} in
# ----------- up ------------
    "up")
        up ${@:2}
        ;;

# ----------- down ------------
    "down")
        down ${@:2}
        ;;

# ----------- start ------------
    "start")
        start ${@:2}
        ;;

# ----------- stop ------------
    "stop")
        stop ${@:2}
        ;;

# ----------- restart ------------
    "restart")
        restart ${@:2}
        ;;

# ----------- network ------------
    "network")
        network
        ;;

# ----------- list ------------
    "list")
        list
        ;;


    *)
        show_usage
        ;;
esac
