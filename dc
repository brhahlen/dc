#!/bin/bash
##################################
# Copyright (C) 2021 Ben HÃ¤hlen
##################################
# VERSION
export DC_VERSION=v1.2.0

###### PREREQUISITE CHECKS
# tee
if ! command -v tee &> /dev/null
then
    echo "tee could not be found, please install it to use dc"
    exit 1
fi
# docker-compose version
# Inspired by/Copied from https://unix.stackexchange.com/a/285928
if ! command -v docker-compose &> /dev/null ; then
    echo "docker-compose could not be found, please install it to use dc"
    exit 1
else
    DOCKER_COMPOSE_VERSION="$(docker-compose --version | cut -d " " -f 3 | cut -d "," -f 1)"
#echo "${DOCKER_COMPOSE_VERSION}"
    MIN_VERSION="1.25.0"
    if [ ! "$(printf '%s\n' "${MIN_VERSION}" "${DOCKER_COMPOSE_VERSION}" | sort -V | head -n1)" = "${MIN_VERSION}" ]; then
    echo "You are running docker-compose version ${DOCKER_COMPOSE_VERSION}. This script requires version ${MIN_VERSION} or higher, due to the use of the --env-file option."
    echo "Please install a newer version of docker-compose. You can find this at https://github.com/docker/compose/releases"
    exit 1
    fi
fi
# curl
if ! command -v curl &> /dev/null
then
    echo "curl could not be found, please install it to use dc"
    exit 1
fi
# grep
if ! command -v grep &> /dev/null
then
    echo "grep could not be found, please install it to use dc"
    exit 1
fi

###### VARIABLES
if [[ -z "${DC_DIR}" ]]; then
    export DC_DIR="${HOME}/docker"
else
    export DC_DIR="${DC_DIR}"
fi
export ENV="${DC_DIR}/.env"
export DC_CMD=`which docker-compose`
export DC_COMMAND="${DC_CMD} --env-file ${ENV}"
export TMP_DIR="/tmp/dc_stack_services"
# COLORS
export RED='\033[0;31m'
export BLUE='\033[0;34m'
export NC='\033[0m' # No Color

###### HELPER FUNCTIONS
# MP_DIR STACK SERVICES
function tmp_dir_stack_files(){
    if [ ! -d "${TMP_DIR}" ]; then
        # echo "${TMP_DIR} not found. Creating..."
        mkdir -p ${TMP_DIR}
    fi
}

# TMP_STACK FILES AGE
function tmp_stack_files_age(){
    tmp_dir_stack_files
    for STACK in $(find ${DC_DIR} -name docker-compose.yml -printf '%h\n' | sort -u);
    do
        STACK_NAME=$(echo ${STACK} | rev | cut -d / -f 1 | rev)
        if [ -f ${TMP_DIR}/${STACK_NAME} ]; then
            # echo "File exists, checking age"
            if [ "$(find ${TMP_DIR}/${STACK_NAME} -mmin +30)" ]; then
                # echo "File is too old, refreshing"
                cd ${STACK}
                ${DC_COMMAND} ps --services -a > ${TMP_DIR}/${STACK_NAME}
                cd - > /dev/null
            fi
        else
            # echo "File does not exist, creating"
            cd ${STACK}
            ${DC_COMMAND} ps --services -a > ${TMP_DIR}/${STACK_NAME}
            cd - > /dev/null
        fi
    done
}

###### MAIN FUNCTIONS
# USAGE
function show_usage (){
    printf "Usage: $0 [options] [stacks]\n"
    printf "\n"
    printf "Options:\n"
    printf " ${RED}install${NC}        Install dc for the user, needs sudo\n"
    printf " ${RED}up${NC}             Bring up all stacks, a stack, or stacks\n"
    printf " ${RED}down${NC}           Bring down all stacks, a stack or stack(s)\n"
    printf " ${RED}restart-stack${NC}  Restarts all stacks, a stack or stack(s)\n"
    printf " ${RED}logs-stack${NC}     Shows logs for a stack or stacks\n"
    printf " ${RED}start${NC}          Starts one or more services\n"
    printf " ${RED}stop${NC}           Stops one or more services\n"
    printf " ${RED}restart${NC}        Restarts one or more services\n"
    printf " ${RED}pull${NC}           Pulls an image of a service\n"
    printf " ${RED}logs${NC}           Shows logs for a service or services\n"
    printf " ${RED}network${NC}        Create the MacVLAN network, needs sudo\n"
    printf " ${RED}list${NC}           List stacks and services in the stacks\n"
    printf " ${RED}help${NC}           Print help\n"
    printf " ${RED}version${NC}        Shows the version and checks the latest version\n"

return 0
}

# INSTALL
function install(){
    if [[ $EUID -ne 0 ]]; then
        echo "This function must be run using root privileges (using sudo)"
        exit 1
    fi
    unset DC_DIR
    # Who is executing the script?
    echo "User running the installation is $SUDO_USER"
    HOME_DIR=$(grep $SUDO_USER /etc/passwd | cut -d ":" -f 6)
    GID=$(grep $SUDO_USER /etc/passwd | cut -d ":" -f 4)
    echo "Home directory is ${HOME_DIR}"
    echo "Copying dc binary to ${HOME_DIR}/bin and making it executable"
    if [ ! -d ${HOME_DIR}/bin ]; then
        echo "${HOME_DIR}/bin does not exist. Creating..."
        mkdir -p ${HOME_DIR}/bin
    fi
    cp -f dc ${HOME_DIR}/bin
    chmod 744 ${HOME_DIR}/bin/dc
    chown -R $SUDO_USER:${GID} ${HOME_DIR}/bin
    # Do stuff here
    echo "Copying dc-completion binary to /etc/bash_completion.d/ and making it executable"
    # Check for root access
    if [ ! -d /etc/bash_completion.d ]; then
        echo "/etc/bash_completion.d does not exist. Creating..."
        mkdir -p /etc/bash_completion.d
    fi
    cp -f dc-completion /etc/bash_completion.d
    chmod +x /etc/bash_completion.d/dc-completion
    if ! grep -q "\$HOME/bin" ${HOME_DIR}/.bashrc; then
        echo "Adding dc to PATH"
        echo "PATH=\"\$HOME/bin:\$PATH\"" >> ${HOME_DIR}/.bashrc
        echo "export PATH" >> ${HOME_DIR}/.bashrc
    fi
    if ! grep -q DC_DIR ${HOME_DIR}/.bashrc; then
        echo "Set DC_DIR variable and add to ${HOME_DIR}/.bashrc"
        read -p "Where are your docker-compose stacks located? " DC_DIR
        echo "export DC_DIR=${DC_DIR}" >> ${HOME_DIR}/.bashrc
    fi
}

# UP
function up(){
    if [ -z "$1" ]; then
        echo "No argument provided, please use the name of a stack or all"
    elif [ "$1" == "all" ]; then
        echo "Bringing up all stacks"
        for STACK in $(find ${DC_DIR} -name docker-compose.yml -printf '%h\n' | sort -u);
        do
            echo -e "\n${STACK}:"
            cd $STACK
            ${DC_COMMAND} up -d
            cd - > /dev/null
        done
    else
        for STACK in $@;
        do
            STACK_DIR="${DC_DIR}/${STACK}"
            if [ -d "${STACK_DIR}" ]; then
                echo "Bringing up stack ${STACK}"
                cd ${STACK_DIR}
                ${DC_COMMAND} up -d
                cd - > /dev/null
            else
                echo "Stack ${STACK} does not exist. Did you type the name correctly?"
            fi
        done
    fi
    }

# DOWN
function down(){
    if [ -z "$1" ]; then
        echo "No argument provided, please use the name of a stack or all"
    elif [ "$1" == "all" ]; then
        echo "Bringing down all stacks"
        for STACK in $(find ${DC_DIR} -name docker-compose.yml -printf '%h\n' | sort -ur);
        do
            echo -e "\n${STACK}:"
            cd ${STACK}
            ${DC_COMMAND} down
            cd - > /dev/null
        done
    else
        for STACK in $@;
        do
            STACK_DIR="${DC_DIR}/${STACK}"
            if [ -d "${STACK_DIR}" ]; then
                echo "Bringing down stack ${STACK}"
                cd ${STACK_DIR}
                ${DC_COMMAND} down
                cd - > /dev/null
            else
                echo "Stack ${STACK} does not exist. Did you type the name correctly?"
            fi
        done
    fi
    }

# RESTART-STACK
## HARD
# RESTART-STACK
function restart-stack-hard(){
    if [ -z "$1" ]; then
        echo "No argument provided, please use the name of a stack or all"
    elif [ "$1" == "all" ]; then
        echo "Hard Restarting all stacks"
        for STACK in $(find ${DC_DIR} -name docker-compose.yml -printf '%h\n' | sort -u);
        do
            echo -e "\n${STACK}:"
            cd $STACK
            ${DC_COMMAND} down
            ${DC_COMMAND} up -d
            cd - > /dev/null
        done
    else
        for STACK in $@;
        do
            STACK_DIR="${DC_DIR}/${STACK}"
            if [ -d "${STACK_DIR}" ]; then
                echo "Restarting stack ${STACK}"
                cd ${STACK_DIR}
                ${DC_COMMAND} down
                ${DC_COMMAND} up -d
                cd - > /dev/null
            else
                echo "Stack ${STACK} does not exist. Did you type the name correctly?"
            fi
        done
    fi
    }

## SOFT
function restart-stack-soft(){
    if [ -z "$1" ]; then
        echo "No argument provided, please use the name of a stack or all"
    elif [ "$1" == "all" ]; then
        echo "Restarting all stacks"
        for STACK in $(find ${DC_DIR} -name docker-compose.yml -printf '%h\n' | sort -u);
        do
            echo -e "\n${STACK}:"
            cd $STACK
            ${DC_COMMAND} restart
            cd - > /dev/null
        done
    else
        for STACK in $@;
        do
            STACK_DIR="${DC_DIR}/${STACK}"
            if [ -d "${STACK_DIR}" ]; then
                echo "Restarting stack ${STACK}"
                cd ${STACK_DIR}
                ${DC_COMMAND} restart
                cd - > /dev/null
            else
                echo "Stack ${STACK} does not exist. Did you type the name correctly?"
            fi
        done
    fi
    }

# RESTART-STACK
function logs-stack(){
    if [ -z "$1" ]; then
        echo "No argument provided, please provide the name(s) of a stack(s)"
    else
        for STACK in $@;
        do
            STACK_DIR="${DC_DIR}/${STACK}"
            if [ -d "${STACK_DIR}" ]; then
                echo "Showing logs for stack ${STACK}"
                cd ${STACK_DIR}
                ${DC_COMMAND} logs --tail=100 -f
                cd - > /dev/null
            else
                echo "Stack ${STACK} does not exist. Did you type the name correctly?"
            fi
        done
    fi
    }

# # Something to add to start: check if container is exited or not, and then use proper command to start
# To check if a container is exited
# docker-compose ps | grep Exit | cut -d " " -f 1
# START
function start(){
    echo "Starting the following service(s): $@"
    tmp_stack_files_age
    for SERVICE in $@;
    do
        if grep -r -q -x ${SERVICE} ${TMP_DIR}; then
            SERVICE_STACK=$(grep -r -x ${SERVICE} ${TMP_DIR} | rev | cut -d / -f 1 | rev | cut -d : -f 1 )
            # echo "${SERVICE_STACK}"
            # echo "Found ${SERVICE} in ${SERVICE_STACK}"
            cd ${DC_DIR}/${SERVICE_STACK}
            ${DC_COMMAND} up -d ${SERVICE}
            cd - > /dev/null
        else
            echo "ERROR: Service ${SERVICE} was not found in any of the stacks. Does it show up when you run 'dc list'?"
        fi
    done
    }

# STOP
# Stop also removes the image
function stop(){
    echo "Stopping the following service(s): $@"
    tmp_stack_files_age
    for SERVICE in $@;
    do
        if grep -r -q -x ${SERVICE} ${TMP_DIR}; then
            SERVICE_STACK=$(grep -r -x ${SERVICE} ${TMP_DIR} | rev | cut -d / -f 1 | rev | cut -d : -f 1 )
            # echo "${SERVICE_STACK}"
            # echo "Found ${SERVICE} in ${SERVICE_STACK}"
            # echo "${DC_DIR}"
        # echo "cd ${DC_DIR}/${SERVICE_STACK}"
        cd ${DC_DIR}/${SERVICE_STACK}
        ${DC_COMMAND} stop ${SERVICE}
            ${DC_COMMAND} rm -f ${SERVICE}
            cd - > /dev/null
        else
            echo "ERROR: Service ${SERVICE} was not found in any of the stacks. Does it show up when you run 'dc list'?"
        fi
    done
    }

# RESTART
# Restart is basically a stop and start in sequence
function restart(){
    echo "Restarting the following service(s): $@"
    stop $@
    start $@
    }

# PULL
function pull(){
    echo "Pulling images for the following service(s): $@"
    tmp_stack_files_age
    for SERVICE in $@;
    do
        if grep -r -q -x ${SERVICE} ${TMP_DIR}; then
            SERVICE_STACK=$(grep -r -x ${SERVICE} ${TMP_DIR} | rev | cut -d / -f 1 | rev | cut -d : -f 1 )
            # echo "${SERVICE_STACK}"
            # echo "Found ${SERVICE} in ${SERVICE_STACK}"
            cd ${DC_DIR}/${SERVICE_STACK}
            ${DC_COMMAND} pull ${SERVICE}
            cd - > /dev/null
        else
            echo "ERROR: Service ${SERVICE} was not found in any of the stacks. Does it show up when you run 'dc list'?"
        fi
    done
    }

function logs(){
    # Need this function to ensure that all child process are killed from the logs command
    trap_kill(){
    for PID in $WAIT_PIDS;
    do
        # echo "\$PID is $PID"
        CHILD_PID=`ps --ppid $PID -o pid=`
        # echo "CHILD_PID is $CHILD_PID"
        kill $CHILD_PID
    done
    }
    echo "Showing logs for the following service(s): $@"
    tmp_stack_files_age
    for SERVICE in $@;
    do
        if grep -r -q -x ${SERVICE} ${TMP_DIR}; then
            SERVICE_STACK=$(grep -r -x ${SERVICE} ${TMP_DIR} | rev | cut -d / -f 1 | rev | cut -d : -f 1 )
            # echo "${SERVICE_STACK}"
            # echo "Found ${SERVICE} in ${SERVICE_STACK}"
            cd ${DC_DIR}/${SERVICE_STACK}
            ${DC_COMMAND} logs --tail=1 -f ${SERVICE} &
            if [ -z "$WAIT_PIDS" ]
                then
                    export WAIT_PIDS="$!"
                else
                    export WAIT_PIDS="$WAIT_PIDS $!"
            fi
            echo "PID=$!"
            cd - > /dev/null
        else
            echo "ERROR: Service ${SERVICE} was not found in any of the stacks. Does it show up when you run 'dc list'?"
        fi
    done
    # echo "\$WAIT_PIDS contains $WAIT_PIDS"
    trap 'trap_kill' SIGHUP SIGINT SIGQUIT SIGTERM
    wait $WAIT_PIDS
    }

# NETWORK
function network(){
    echo "This function does nothing (yet)"
    }

# LIST
function list(){
    tmp_dir_stack_files
    echo "Listing Stacks and Services"
    for STACK in $(find ${DC_DIR} -name docker-compose.yml -printf '%h\n' | sort -u);
    do
        STACK_NAME=$(echo ${STACK} | rev | cut -d / -f 1 | rev)
        echo "-----------------------------------"
        printf "Stack ${RED}${STACK_NAME}${NC} contains services:\n"
        cd ${STACK}
        ${DC_COMMAND} ps --services -a | tee ${TMP_DIR}/${STACK_NAME}
        cd - > /dev/null
    done
    }

###### CASES
case ${1} in
# ----------- install ------------
    "install")
        install
        ;;

# ----------- up ------------
    "up")
        up ${@:2}
        ;;

# ----------- down ------------
    "down")
        down ${@:2}
        ;;

# ----------- restart-stack-hard ------------
    "restart-stack-hard")
        restart-stack-hard ${@:2}
        ;;

# ----------- restart-stack-soft ------------
    "restart-stack-soft")
        restart-stack-soft ${@:2}
        ;;

# ----------- logs-stack ------------
    "logs-stack")
        logs-stack ${@:2}
        ;;

# ----------- start ------------
    "start")
        start ${@:2}
        ;;

# ----------- stop ------------
    "stop")
        stop ${@:2}
        ;;

# ----------- restart ------------
    "restart")
        restart ${@:2}
        ;;

# ----------- pull ------------
    "pull")
        pull ${@:2}
        ;;

# ----------- logs ------------
    "logs")
        logs ${@:2}
        ;;

# ----------- network ------------
    "network")
        network
        ;;

# ----------- list ------------
    "list")
        list
        ;;
# ----------- version ------------
    "version")
        export LATEST_VERSION=$(curl --silent https://api.github.com/repos/brhahlen/dc/releases/latest | grep -Po '"tag_name": "\K.*?(?=")')
        if [[ ${DC_VERSION} =~ "dev" ]]; then
            printf "This is version ${RED}${DC_VERSION}${NC} of ${RED}dc${NC}\n"
            printf "This is a development version\n"
            printf "The latest release version is ${BLUE}${LATEST_VERSION}${NC} \n"
        else
            printf "This is version ${DC_VERSION} of ${RED}dc${NC}\n"
            printf "Release notes can be found at https://github.com/brhahlen/dc/releases/tag/${DC_VERSION} \n"
            if [ ! "$(printf '%s\n' "${LATEST_VERSION}" "${DC_VERSION}" | sort -V | head -n1)" = "${LATEST_VERSION}" ]; then
                printf "####################################\n"
                printf "A newer version of ${RED}dc${NC} is avaiable\n"
                printf "The latest release version is ${BLUE}${LATEST_VERSION}${NC} \n"
                printf "This can be found at https://github.com/brhahlen/dc/releases/tag/${LATEST_VERSION} \n"
            fi
        fi
        ;;
# ----------- All others ------------
    *)
        show_usage
        ;;
esac
