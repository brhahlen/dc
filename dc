#!/bin/bash
# Copyright (C) 2021 Ben HÃ¤hlen
##################################
######### DESCRIPTION ############
##################################
# Provides the following main functions:
# - up      - bring up all stacks, an individual stack or a container
# - down    - brings down all stacks or an individual stack
# - stop    - stops all stacks, an individual stack, or a container
# - restart - restart all stacks, a stack, or a container
# - network - create the macvlan network that is needed
# - list    - lists all stacks and services in the stack
##################################
###### VARIABLES
if [[ -z "${DC_DIR}" ]]; then
    export DC_DIR="${HOME}/docker"
else
    export DC_DIR="${DC_DIR}"
fi
export ENV="${DC_DIR}/.env"
export DC_CMD=`which docker-compose`
export DC_COMMAND="${DC_CMD} --env-file ${ENV}"
export TMP_DIR="/tmp/dc_stack_services"

# COLORS
export RED='\033[0;31m'
export NC='\033[0m' # No Color

###### PREREQUISITE CHECKS
# tee
if ! command -v tee &> /dev/null
then
    echo "tee could not be found, please install it to use dc"
    exit 1
fi

###### HELPER FUNCTIONS
# TMP_DIR STACK SERVICES
function tmp_dir_stack_files(){
    if [ ! -d "${TMP_DIR}" ]; then
        # echo "${TMP_DIR} not found. Creating..."
        mkdir -p ${TMP_DIR}
    fi
}

# TMP_STACK FILES AGE
function tmp_stack_files_age(){
    tmp_dir_stack_files
    for STACK in $(find ${DC_DIR} -name docker-compose.yml -printf '%h\n' | sort -u);
    do
        STACK_NAME=$(echo ${STACK} | rev | cut -d / -f 1 | rev)
        if [ -f ${TMP_DIR}/${STACK_NAME} ]; then
            # echo "File exists, checking age"
            if [ "$(find ${TMP_DIR}/${STACK_NAME} -mmin +30)" ]; then
                # echo "File is too old, refreshing"
                cd ${STACK}
                ${DC_COMMAND} ps --services -a > ${TMP_DIR}/${STACK_NAME}
            fi
        else
            # echo "File does not exist, creating"
            cd ${STACK}
            ${DC_COMMAND} ps --services -a > ${TMP_DIR}/${STACK_NAME}
        fi
    done
}

###### MAIN FUNCTIONS
# USAGE
function show_usage (){
    printf "Usage: $0 [options] [stacks]\n"
    printf "\n"
    printf "Options:\n"
    printf " ${RED}up${NC}        Bring up all stacks, a stack, or stacks\n"
    printf " ${RED}down${NC}      Bring down all stacks, a stack or stack(s)\n"
    printf " ${RED}start${NC}     Starts one or more services\n"
    printf " ${RED}stop${NC}      Stops one or more services\n"
    printf " ${RED}restart${NC}   Restarts one or more services\n"
    printf " ${RED}pull${NC}      Pulls an image of a service"
    printf " ${RED}network${NC}   Create the MacVLAN network\n"
    printf " ${RED}list${NC}      List stacks and services in the stacks\n"
    printf " ${RED}help${NC}      Print help\n"

return 0
}

# UP
function up () {
    if [ -z "$1" ]; then
        echo "No argument provided, please use the name of a stack or all"
    elif [ "$1" == "all" ]; then
        echo "Bringing up all stacks"
        for STACK in $(find ${DC_DIR} -name docker-compose.yml -printf '%h\n' | sort -u);
        do
            echo -e "\n${STACK}:"
            cd $STACK
            ${DC_COMMAND} up -d
            cd - > /dev/null
        done
    else
        for STACK in $@;
        do
            STACK_DIR="${DC_DIR}/${STACK}"
            if [ -d "${STACK_DIR}" ]; then
                echo "Bringing up stack(s) ${STACK}"
                cd ${STACK_DIR}
                ${DC_COMMAND} up -d
                cd - > /dev/null
            else
                echo "Stack ${STACK} does not exist. Did you type the name correctly?"
            fi
        done
    fi
    }

# DOWN
function down(){
    if [ -z "$1" ]; then
        echo "No argument provided, please use the name of a stack or all"
    elif [ "$1" == "all" ]; then
        echo "Bringing down all stacks"
        for STACK in $(find ${DC_DIR} -name docker-compose.yml -printf '%h\n' | sort -ur);
        do
            echo -e "\n${STACK}:"
            cd ${STACK}
            ${DC_COMMAND} down
            cd - > /dev/null
        done
    else
        for STACK in $@;
        do
            STACK_DIR="${DC_DIR}/${STACK}"
            if [ -d "${STACK_DIR}" ]; then
                echo "Bringing down stack(s) ${STACK}"
                cd ${STACK_DIR}
                ${DC_COMMAND} down
                cd - > /dev/null
            else
                echo "Stack ${STACK} does not exist. Did you type the name correctly?"
            fi
        done
    fi
    }

# START
function start(){
    echo "Starting the following service(s): $@"
    tmp_stack_files_age
    for SERVICE in $@;
    do
        if grep -r -q -w ${SERVICE} ${TMP_DIR}; then
            SERVICE_STACK=$(grep -r ${SERVICE} ${TMP_DIR} | rev | cut -d / -f 1 | rev | cut -d : -f 1 )
            # echo "${SERVICE_STACK}"
            # echo "Found ${SERVICE} in ${SERVICE_STACK}"
            cd ${DC_DIR}/${SERVICE_STACK}
            ${DC_COMMAND} up -d ${SERVICE}
            cd - > /dev/null
        else
            echo "ERROR: Service ${SERVICE} was not found in any of the stacks. Does it show up when you run 'dc list'?"
        fi
    done
    }

# STOP
# Stop also removes the image
function stop(){
    echo "Stopping the following service(s): $@"
    tmp_stack_files_age
    for SERVICE in $@;
    do
        if grep -r -q -w ${SERVICE} ${TMP_DIR}; then
            SERVICE_STACK=$(grep -r ${SERVICE} ${TMP_DIR} | rev | cut -d / -f 1 | rev | cut -d : -f 1 )
            # echo "${SERVICE_STACK}"
            # echo "Found ${SERVICE} in ${SERVICE_STACK}"
            cd ${DC_DIR}/${SERVICE_STACK}
            ${DC_COMMAND} stop ${SERVICE}
            ${DC_COMMAND} rm -f ${SERVICE}
            cd - > /dev/null
        else
            echo "ERROR: Service ${SERVICE} was not found in any of the stacks. Does it show up when you run 'dc list'?"
        fi
    done
    }

# RESTART
# Restart is basically a stop and start in sequence
function restart(){
    echo "Restarting the following service(s): $@"
    stop $@
    start $@
    }

# PULL
function pull(){
    echo "Pulling images for the following service(s): $@"
    tmp_stack_files_age
    for SERVICE in $@;
    do
        if grep -r -q -w ${SERVICE} ${TMP_DIR}; then
            SERVICE_STACK=$(grep -r ${SERVICE} ${TMP_DIR} | rev | cut -d / -f 1 | rev | cut -d : -f 1 )
            # echo "${SERVICE_STACK}"
            # echo "Found ${SERVICE} in ${SERVICE_STACK}"
            cd ${DC_DIR}/${SERVICE_STACK}
            ${DC_COMMAND} pull ${SERVICE}
            cd - > /dev/null
        else
            echo "ERROR: Service ${SERVICE} was not found in any of the stacks. Does it show up when you run 'dc list'?"
        fi
    done
    }

# NETWORK
function network(){
    echo "This function will create the macvlan network, create an interface, routes so the services can access each other, and makes the interface and routes permanent."
    echo "You need to be root, or use sudo, to execute this function"
    # Ensure that they want to continue
    read -p "Do you wish to continue? " -n 1 -r
    echo    # (optional) move to a new line
    if [[ ! $REPLY =~ ^[Yy]$ ]]
    then
        exit 1
    fi
    # Check for root access
    if [[ $EUID -ne 0 ]]; then
        echo "This function must be run as root" 
        exit 1
    fi
    echo "Creating the MACVLAN network"
    echo "docker network create -d macvlan \
        -o parent=enp0s31f6 \
        --subnet=192.168.2.0/24 \
        --gateway=192.168.2.1 \
        --ip-range=192.168.2.0/24 \
        --aux-address 'host=192.168.2.251' \
        lan_net"
    echo "Adding interface to allow communcation between services is possible"
    echo "ip link add lan_net_shim link enp0s31f6 type macvlan mode bridge"
    echo "Configure the interface and bring it up"
    echo "ip addr add 192.168.2.251/32 dev lan_net_shim"
    echo "ip link set lan_net_shim up"
    echo "Add the route needed"
    echo "ip route add 192.168.2.0/24 dev lan_net_shim"
    echo "Adding permanent settings"
    echo "[Unit]
Description=Docker MacVLAN Stuff
After=docker.service

[Service]
Type=oneshot
ExecStart=/bin/bash /home/ben2404/gandalf_scripts/docker_macvlan.sh

[Install]
WantedBy=multi-user.target" #> /etc/systemd/system/docker-macvlan.service
    echo "ip link add lan_net_shim link enp0s31f6 type macvlan mode bridge
ip addr add 192.168.2.251/32 dev lan_net_shim
ip link set lan_net_shim up
ip route add 192.168.2.0/24 dev lan_net_shim" #> ~/bin/docker-macvlan.sh
    echo "chmod u+x ~/bin/docker-macvlan.sh"
    echo "Reload systemd unit files"
    echo "systemctl daemon-reload"
    echo "systemctl enable docker-macvlan.service"
    }

# LIST
function list(){
    tmp_dir_stack_files
    echo "Listing Stacks and Services"
    for STACK in $(find ${DC_DIR} -name docker-compose.yml -printf '%h\n' | sort -u);
    do
        STACK_NAME=$(echo ${STACK} | rev | cut -d / -f 1 | rev)
        echo "-----------------------------------"
        printf "Stack ${RED}${STACK_NAME}${NC} contains services:\n"
        cd ${STACK}
        ${DC_COMMAND} ps --services -a | tee ${TMP_DIR}/${STACK_NAME}
        cd - > /dev/null
    done
    }

###### CASES
case ${1} in
# ----------- up ------------
    "up")
        up ${@:2}
        ;;

# ----------- down ------------
    "down")
        down ${@:2}
        ;;

# ----------- start ------------
    "start")
        start ${@:2}
        ;;

# ----------- stop ------------
    "stop")
        stop ${@:2}
        ;;

# ----------- restart ------------
    "restart")
        restart ${@:2}
        ;;

# ----------- pull ------------
    "pull")
        pull ${@:2}
        ;;

# ----------- network ------------
    "network")
        network
        ;;

# ----------- list ------------
    "list")
        list
        ;;

    *)
        show_usage
        ;;
esac
