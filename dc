#!/bin/bash
##################################
######### DESCRIPTION ############
##################################
# Provides the following main functions:
# - up      - bring up all stacks, an individual stack or a container
# - down    - brings down all stacks or an individual stack
# - stop    - stops all stacks, an individual stack, or a container
# - restart - restart all stacks, a stack, or a container
# - network - create the macvlan network that is needed
# - list    - lists all stacks and services in the stack
##################################
###### VARIABLES
if [[ -z "${DC_DIR}" ]]; then
    export DC_DIR="${HOME}/docker"
else
    export DC_DIR="${DC_DIR}"
fi
export ENV="${DC_DIR}/.env"
export DC_CMD=`which docker-compose`
export DC_COMMAND="${DC_CMD} --env-file ${ENV}"
export TMP_DIR="/tmp/dc_stack_services"

# COLORS
export RED='\033[0;31m'
export NC='\033[0m' # No Color

###### PREREQUISITE CHECKS
# tee
if ! command -v tee &> /dev/null
then
    echo "tee could not be found, please install it to use dc"
    exit 1
fi

###### HELPER FUNCTIONS
# TMP_DIR STACK SERVICES
function tmp_dir_stack_files(){
    if [ ! -d "${TMP_DIR}" ]; then
        echo "${TMP_DIR} not found. Creating..."
        mkdir -p ${TMP_DIR}
    fi
}

# TMP_STACK FILES AGE
function tmp_stack_files_age(){
    tmp_dir_stack_files
    for stack in $(find ${DC_DIR} -name docker-compose.yml -printf '%h\n' | sort -u);
    do
        STACK_NAME=$(echo $stack | rev | cut -d / -f 1 | rev)
        if [ -f ${TMP_DIR}/${STACK_NAME} ]; then
            echo "File exists, checking age"
            if [ "$(find ${TMP_DIR}/${STACK_NAME} -mmin +30)" ]; then
                echo "File is too old, refreshing"
                cd $stack
                ${DC_COMMAND} ps --services -a > ${TMP_DIR}/${STACK_NAME}
            fi
        else
            echo "File does not exist, creating"
            cd $stack
            ${DC_COMMAND} ps --services -a > ${TMP_DIR}/${STACK_NAME}
        fi
    done
}

###### MAIN FUNCTIONS
# USAGE
function show_usage (){
    printf "Usage: $0 [options [parameters]]\n"
    printf "\n"
    printf "Options:\n"
    printf " ${RED}up${NC}        Bring up a stack\n"
    printf " ${RED}down${NC}      Bring down a stack\n"
    printf " ${RED}start${NC}     Start one or more containers\n"
    printf " ${RED}stop${NC}      Stop one or more containers\n"
    printf " ${RED}restart${NC}   Restart one or more containers\n"
    printf " ${RED}network${NC}   Create the MacVLAN network\n"
    printf " ${RED}list${NC}      List stacks and services in the stack\n"
    printf " ${RED}help${NC}      Print help\n"

return 0
}

# UP
function up () {
    if [ -z "$1" ]; then
        echo "No argument provided, please use the name of a stack or all"
    elif [ "$1" == "all" ]; then
        echo "Bringing up all stacks"
        for stack in $(find ${DC_DIR} -name docker-compose.yml -printf '%h\n' | sort -u);
        do
            echo -e "\n$stack:"
            cd $stack
            ${DC_COMMAND} up -d
            cd - > /dev/null
        done
    else
        for stack in $@;
        do
            STACK="${DC_DIR}/$stack"
            echo "Bringing up stack(s) $stack"
            cd ${STACK}
            ${DC_COMMAND} up -d
            cd - > /dev/null
        done
    fi
    }

# DOWN
function down(){
    if [ -z "$1" ]; then
        echo "No argument provided, please use the name of a stack or all"
    elif [ "$1" == "all" ]; then
        echo "Bringing down all stacks"
        for stack in $(find ${DC_DIR} -name docker-compose.yml -printf '%h\n' | sort -ur);
        do
            echo -e "\n$stack:"
            cd $stack
            ${DC_COMMAND} down
            cd - > /dev/null
        done
    else
        for stack in $@;
        do
            STACK="${DC_DIR}/$stack"
            echo "Bringing down stack(s) $stack"
            cd ${STACK}
            ${DC_COMMAND} down
            cd - > /dev/null
        done
    fi
    }

# START
function start(){
    echo "Starting the following container(s): $@"
    tmp_stack_files_age
    for SERVICE in $@;
    do
        if grep -r -q -w ${SERVICE} ${TMP_DIR}; then
            SERVICE_STACK=$(grep ${SERVICE} "${TMP_DIR}/*" | rev | cut -d / -f 1 | rev | cut -d : -f 1 )
            echo "${SERVICE_STACK}"
            echo "Found ${SERVICE} in ${SERVICE_STACK}"
            echo "cd ${DC_DIR}/${SERVICE_STACK}"
            echo "${DC_COMMAND} start ${SERVICE}"
            echo "cd -"
        else
            echo "Service ${SERVICE} was not found in any of the stacks. Does it show up when you run 'dc list'?"
        fi
    done
    }

# STOP
# Stop also removes the image
function stop(){
    echo "Stopping the following container(s): $@"
    
    echo "${DC_COMMAND} stop "
    }

# RESTART
# Restart is basically a stop and start in sequence
function restart(){
    echo "restart"
    stop
    start
    }

# NETWORK
function network(){
    echo "network"
    }

# LIST
function list(){
    tmp_dir_stack_files
    echo "Listing Stacks and Services"
    for stack in $(find ${DC_DIR} -name docker-compose.yml -printf '%h\n' | sort -u);
    do
        STACK_NAME=$(echo $stack | rev | cut -d / -f 1 | rev)
        echo "-----------------------------------"
        printf "Stack ${RED}${STACK_NAME}${NC} contains services:\n"
        cd $stack
        ${DC_COMMAND} ps --services -a | tee ${TMP_DIR}/${STACK_NAME}
        cd - > /dev/null
    done
    }

###### CASES
case ${1} in
# ----------- up ------------
    "up")
        up ${@:2}
        ;;

# ----------- down ------------
    "down")
        down ${@:2}
        ;;

# ----------- start ------------
    "start")
        start ${@:2}
        ;;

# ----------- stop ------------
    "stop")
        stop ${@:2}
        ;;

# ----------- restart ------------
    "restart")
        restart ${@:2}
        ;;

# ----------- network ------------
    "network")
        network
        ;;

# ----------- list ------------
    "list")
        list
        ;;

# ----------- refresh stack files tmp
    "refresh")
        tmp_stack_files_age
        ;;

    *)
        show_usage
        ;;
esac
